{"version":3,"sources":["components/pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","className","onSubmit","this","props","getPokemon","type","name","placeholder","src","pokemon_image","alt","pokemon_name","pokemon_type","Component","App","state","undefined","e","a","preventDefault","id","target","elements","pokemonid","value","fetch","response","json","data","console","log","setState","toUpperCase","types","map","x","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QACA,iC,IA4BeA,E,iLAtBP,OAEI,yBAAKC,UAAU,aACX,uCACA,kEACA,0BAAMC,SAAUC,KAAKC,MAAMC,WAAYJ,UAAU,cAC7C,2BAAOK,KAAK,OAAOC,KAAK,YAAYN,UAAU,SAAUO,YAAY,6CACpE,2CAGJ,4CACA,yBAAKP,UAAU,gBAEf,yBAAKA,UAAU,kBAAf,IAAiC,yBAAKQ,IAAKN,KAAKC,MAAMM,cAAeC,IAAI,YACvE,iCAAM,uBAAGV,UAAU,QAAb,IAAsBE,KAAKC,MAAMQ,eACvC,6BAAK,uBAAGX,UAAU,QAAb,SAA2BE,KAAKC,MAAMS,cAA3C,W,GAnBIC,aCwCPC,E,2MArCbC,MAAQ,CACNJ,kBAAcK,EACdJ,kBAAcI,EACdP,mBAAeO,G,EAIhBZ,W,uCAAa,WAAOa,GAAP,mBAAAC,EAAA,6DACZD,EAAEE,iBACIC,EAAKH,EAAEI,OAAOC,SAASC,UAAUC,MAF3B,SAGWC,MAAM,qCAAD,OAAsCL,IAHtD,cAGNM,EAHM,gBAIOA,EAASC,OAJhB,OAINC,EAJM,OAKZC,QAAQC,IAAIF,GAEb,EAAKG,SAAS,CACZpB,aAAciB,EAAKtB,KAAK0B,cACxBpB,aAAegB,EAAKK,MAAMC,KAAI,SAAAC,GAAC,OAAEA,EAAE9B,KAAKC,KAAK0B,cAAgB,SAE7DvB,cAAc,iDAAD,OAAmDW,EAAnD,UAXF,4C,8HAmBZ,OACE,6BACA,kBAAC,EAAD,CAAShB,WAAYF,KAAKE,WAC1BO,aAAcT,KAAKa,MAAMJ,aACzBC,aAAcV,KAAKa,MAAMH,aACzBH,cAAeP,KAAKa,MAAMN,qB,GAjCdI,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a9aef89.chunk.js","sourcesContent":["import React, { Component }from \"react\";\r\nimport (\"../App.css\")\r\n\r\nclass Pokemon extends Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n            \r\n            <div className=\"container\">\r\n                <h1>Pokedex</h1>\r\n                <h3>Search pokemon by ID as in pokedex</h3>\r\n                <form onSubmit={this.props.getPokemon} className=\"search-bar\">\r\n                    <input type=\"text\" name=\"pokemonid\" className=\"search\"  placeholder=\"Search by using ID (from 1 to maybe 800)\"></input>\r\n                    <button>Search</button>\r\n\r\n                </form>\r\n                <h1>Pokemon Card</h1>\r\n                <div className=\"Pokemon-info\">\r\n                    \r\n                <div className=\"poke-container\"> <img src={this.props.pokemon_image} alt=\"images\"></img></div>\r\n                  <div> <p className=\"name\"> {this.props.pokemon_name}</p></div>\r\n                  <div><p className=\"type\">Type: {this.props.pokemon_type}</p> </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokemon;","import React, { Component } from 'react';\nimport Pokemon from './components/pokemon';\n\n\nclass App extends Component{\n\n  state = {\n    pokemon_name: undefined,\n    pokemon_type: undefined,\n    pokemon_image: undefined\n\n  }\n\n   getPokemon = async (e) =>{\n    e.preventDefault();\n    const id = e.target.elements.pokemonid.value;\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);\n    const data = await response.json();\n    console.log(data);\n    \n   this.setState({\n     pokemon_name: data.name.toUpperCase(),\n     pokemon_type:  data.types.map(x=>x.type.name.toUpperCase() + \" , \"),\n  \n     pokemon_image: `https://pokeres.bastionbot.org/images/pokemon/${id}.png`\n\n   })\n   \n     \n   \n  }\n    render(){\n    return (\n      <div>\n      <Pokemon getPokemon={this.getPokemon}\n      pokemon_name={this.state.pokemon_name}\n      pokemon_type={this.state.pokemon_type}\n      pokemon_image={this.state.pokemon_image}/>\n      </div>\n    );\n\n    }\n }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}